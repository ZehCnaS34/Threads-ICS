 +--------------------------+
       	       	     |		ECE 434		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Alexander Sanchez @domain.example>
Chris Steinert chris13550@gmail.com
Omar Ouf omarouf96@gmail.com

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.
http://dynamicvoltage.blogspot.com/2012/09/pintos-project-2-argument-passing.html
http://www.scs.stanford.edu/07au-cs140/labs/project2aut07.pdf
			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

NO Global or Static Variables.
Added child_process in thread.h

changed the following function declarations

static bool setup_stack (void **esp, const char* file_name, char** save_ptr)
bool load (const char *file_name, void (**eip) (void), void **esp, char **save_ptr)

the function were redefined due to "start_process" placing a null pointer
in the first space on the comand line & the need to parse the filename properly.
The save_ptr is used to point to the arguments.


---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?

for argument parsing , the command line is parased in order and each argument
character string is pushed onto the stack . while storing a pointer to the
argument in the local char** variable.  
since the exact size of the arguments is unknown. whenever the argv structure is full
the size is doubled.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

as you cannot call strtok from multiple threads.. as it strtok has a static pointer
that is shared among all calls. whereas you can call strtok_r from multiple threads
running at the same time. and they wouldnt interfere.
>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

- The kernel memory cannot grow to much. therefore its much better to use 
unix-like systems as then you dont waste valuable space of kernel. where if
the kernel memeory is depleted . the entire system crashes.

-seeing that the shell has access to the parameters before the kernel.
 this allows the shell to check if for example the arguments are blank
or if the user entered invalid characters.


			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct child_process* active_child;
struct list children; // containing child procceses
struct list files; // files that are assiciated thread

I've added them to create the association between the parent and the 
child when creating a new child_process, and files that are associated with the thread.
The active pointer is used for quick access to the next or currently used child_process.


(typedef int pid_t) This typedef is similar to the one already defined in threads "tid_t", but is used to tell the difference between a thread process and a child process

The child process data structure was defined. It is a relatively small datastructure
that allows us to keep track of new processes that are spawned by threads.


struct child_process {
  pid_t process_id;
  pid_t parent_id;
  list_elem* elem;
  int status;
};

struct my_file {
	int parent_id;
	int desc;
	struct list_elem* elem;
	struct file* file;
}

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

File descriptors are associated with open files through the my_files struct.
the my_file struct contains the file struct, which containes the data of the file,
and contains description `desc`. Desc is the file description of the file.

The file description is local per file.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.


>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Any other comments?
